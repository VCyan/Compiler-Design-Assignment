/**
 * @file table.h
 * @author Victor Eduardo 
 * @brief  table.h declares the definitions used for the Symbol Table and 
 * the Glib library. See the Glib documentation at:
 * https://developer.gnome.org/glib/stable/glib-Hash-Tables.html
 *
 * @version 0.1
 * @date 2019-02-09
 * 
 * @copyright Copyright (c) 2019
 * 
 */
#include <glib.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/**
 * @typedef string
 * 
 * @brief String definition as a char pointer (char *)
 * 
 */
typedef char * string;

/**
 * @brief Used to identify the value that a a variable will hold.
 * 
 */
union number_value
{
	int intf;
	double fds;
};

/**
 * @struct symtab
 *
 * @brief This is the basic user-defined element of the linked list
 *
 * The user-defined data structure is an @c int and a @c string. These
 * are used just to show how to implement user-defined structures.
 *
 */
struct symtab {
  string name_value;				// The name of the variable, though it will not necessarily be a variable
  union number_value num_value; // The value of the variable either int or float
} symbolTable;

/**
 * @typedef symbolTable_node_p
 *
 * @brief Declares a pointer type to the Symbol-Table-defined data structure
 *
 */
typedef struct symtab *symbolTable_node_p;  /**< Simplify declaration of ptr to node */

/**
 * @GHashTable
 * 
 * @brief The Hash Table structure to abstract the Symbol Table, this is automatically generated by Glib.h
 * 
 */
// GHashTable *table;

struct symbolTable_node_p *symlook(string s);

void printSymbolTable();
